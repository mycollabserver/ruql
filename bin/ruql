#!/usr/bin/env ruby

require_relative '../lib/ruql'
require 'getoptlong'
require 'byebug'

module Ruql
  class Runner

    def initialize
      @renderer = nil
      @options = {}
      @filename = nil
      @template = nil
      @solutions = nil
      @help = ''
      @additional_options = [[]]
    end

    def version
      puts Ruql::VERSION
      exit true
    end

    def load_renderer
      renderer = ARGV.shift
      if renderer == 'stats'
        @renderer = Ruql::Stats
        @help = ''
        @additional_options = []
      else
        begin
          require "ruql/#{renderer}"
          @renderer = Object.const_get("Ruql::" + renderer.gsub(/(?:_|^)(\w)/){$1.upcase})
          @help,@additional_options = @renderer.allowed_options
        rescue LoadError => e
          raise Ruql::OptionsError.new("Renderer #{renderer} requires the gem ruql-#{renderer} to be installed")
        end
      end
    end

    def run
      usage if ARGV.length < 1 || ARGV[0] =~ /^--?[Hh]/
      version if ARGV[0] =~ /^-v/
      load_renderer

      options = [
        ['-H', '-h', '--help', GetoptLong::NO_ARGUMENT],
        ['-S', '--solutions', GetoptLong::NO_ARGUMENT],
        ['-V', '--verbose', GetoptLong::NO_ARGUMENT]
      ]
      opts = GetoptLong.new(*(options + @additional_options))
      
      opts.each do |opt,arg|
        usage(help) if (opt == '--help' || opt == '-H')
        # anything else gets passed to renderer
        @options[opt] = arg
      end
      @filename = ARGV.pop
      raise "Cannot read #{@filename}" unless File.readable? @filename

      ## Quiz.set_yaml_file opts.delete("y") || opts.delete("yaml")
      Quiz.set_options(@options)
      Quiz.instance_eval "#{IO.read(@filename)}"
      Quiz.quizzes.each { |quiz| puts quiz.render_with(@renderer, @options)  }
    end
    
    def usage(help='')
      name = File.basename $0
      STDERR.puts <<eos
Usage: #{name} <formatter> [options] filename.rb

 filename.rb contains questions expressed in RuQL.  Formatters are packaged as separate gems
 named ruql-*, for example, formatter 'html' is provided by the gem ruql-html, which must
 be installed. See #{Gem.loaded_specs['ruql'].homepage} for available formatters or to add your own.

The special renderer 'stats' will just show stats for the input file without generating output.
Global options:
  -S, --solutions
     Generate a version of the output with solutions included (not supported by all renderers)
  -V, --verbose
     Show verbose output for debugging

#{help}

eos
      exit false
    end
  end
end  

Ruql::Runner.new.run


